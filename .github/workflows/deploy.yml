name: Create and publish a Docker image

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}

concurrency:
  group: ${{ github.event.repository.full_name }}-docker-push

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        if: github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
          sbom: true

  trigger-renderer-deployment:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        env:
          deploy_url: ${{ secrets.RENDERER_DEPLOY_HOOK_URL }}
        run: |
          set -e
          echo "Starting deployment..."

          # Capture the response body and status code
          response=$(curl -s -w "%{http_code}" -o response_body.txt "${{ env.deploy_url }}&imgURL=docker.io%2F${{ github.repository_owner }}%2F${{ github.event.repository.name }}%3Alatest")
          response_body=$(cat response_body.txt)

          echo "Deployment response code: $response"
          echo "Deployment response body: $response_body"

          if [ "$response" -ne 200 ]; then
            echo "Deployment failed with response code $response" >&2
            echo "Error response body: $response_body" >&2
            exit 1
          fi
